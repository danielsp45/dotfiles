"use strict";(globalThis.webpackChunknotion_next=globalThis.webpackChunknotion_next||[]).push([[74911],{574911:(t,r,e)=>{e.d(r,{diagram:()=>gt});var n=()=>e(715522),o=()=>e(64595),a={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},c=o().UI.gitGraph,s=(0,o().K2)((()=>(0,n().$t)({...c,...(0,o().zj)().gitGraph})),"getConfig"),i=new(e(968448).m)((()=>{const t=s(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}}));function h(){return(0,n().yT)({length:7})}function d(t,r){const e=Object.create(null);return t.reduce(((t,n)=>{const o=r(n);return e[o]||(e[o]=!0,t.push(n)),t}),[])}(0,o().K2)(h,"getID"),(0,o().K2)(d,"uniqBy");var m=(0,o().K2)((function(t){i.records.direction=t}),"setDirection"),$=(0,o().K2)((function(t){o().Rm.debug("options str",t),t=t?.trim(),t=t||"{}";try{i.records.options=JSON.parse(t)}catch(r){o().Rm.error("error while parsing gitGraph options",r.message)}}),"setOptions"),l=(0,o().K2)((function(){return i.records.options}),"getOptions"),g=(0,o().K2)((function(t){let r=t.msg,e=t.id;const n=t.type;let c=t.tags;o().Rm.info("commit",r,e,n,c),o().Rm.debug("Entering commit:",r,e,n,c);const d=s();e=o().Y2.sanitizeText(e,d),r=o().Y2.sanitizeText(r,d),c=c?.map((t=>o().Y2.sanitizeText(t,d)));const m={id:e||i.records.seq+"-"+h(),message:r,seq:i.records.seq++,type:n??a.NORMAL,tags:c??[],parents:null==i.records.head?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=m,o().Rm.info("main branch",d.mainBranchName),i.records.commits.set(m.id,m),i.records.branches.set(i.records.currBranch,m.id),o().Rm.debug("in pushCommit "+m.id)}),"commit"),y=(0,o().K2)((function(t){let r=t.name;const e=t.order;if(r=o().Y2.sanitizeText(r,s()),i.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);i.records.branches.set(r,null!=i.records.head?i.records.head.id:null),i.records.branchConfig.set(r,{name:r,order:e}),f(r),o().Rm.debug("in createBranch")}),"branch"),p=(0,o().K2)((t=>{let r=t.branch,e=t.id;const n=t.type,c=t.tags,d=s();r=o().Y2.sanitizeText(r,d),e&&(e=o().Y2.sanitizeText(e,d));const m=i.records.branches.get(i.records.currBranch),$=i.records.branches.get(r),l=m?i.records.commits.get(m):void 0,g=$?i.records.commits.get($):void 0;if(l&&g&&l.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(i.records.currBranch===r){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(void 0===l||!l){const t=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},t}if(!i.records.branches.has(r)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},t}if(void 0===g||!g){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},t}if(l===g){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(e&&i.records.commits.has(e)){const t=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw t.hash={text:`merge ${r} ${e} ${n} ${c?.join(" ")}`,token:`merge ${r} ${e} ${n} ${c?.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${n} ${c?.join(" ")}`]},t}const y=$||"",p={id:e||`${i.records.seq}-${h()}`,message:`merged branch ${r} into ${i.records.currBranch}`,seq:i.records.seq++,parents:null==i.records.head?[]:[i.records.head.id,y],branch:i.records.currBranch,type:a.MERGE,customType:n,customId:!!e,tags:c??[]};i.records.head=p,i.records.commits.set(p.id,p),i.records.branches.set(i.records.currBranch,p.id),o().Rm.debug(i.records.branches),o().Rm.debug("in mergeBranch")}),"merge"),x=(0,o().K2)((function(t){let r=t.id,e=t.targetId,n=t.tags,c=t.parent;o().Rm.debug("Entering cherryPick:",r,e,n);const d=s();if(r=o().Y2.sanitizeText(r,d),e=o().Y2.sanitizeText(e,d),n=n?.map((t=>o().Y2.sanitizeText(t,d))),c=o().Y2.sanitizeText(c,d),!r||!i.records.commits.has(r)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const m=i.records.commits.get(r);if(void 0===m||!m)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(c&&(!Array.isArray(m.parents)||!m.parents.includes(c))){throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.")}const $=m.branch;if(m.type===a.MERGE&&!c){throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.")}if(!e||!i.records.commits.has(e)){if($===i.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const t=i.records.branches.get(i.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const s=i.records.commits.get(t);if(void 0===s||!s){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const d={id:i.records.seq+"-"+h(),message:`cherry-picked ${m?.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:null==i.records.head?[]:[i.records.head.id,m.id],branch:i.records.currBranch,type:a.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${m.id}${m.type===a.MERGE?`|parent:${c}`:""}`]};i.records.head=d,i.records.commits.set(d.id,d),i.records.branches.set(i.records.currBranch,d.id),o().Rm.debug(i.records.branches),o().Rm.debug("in cherryPick")}}),"cherryPick"),f=(0,o().K2)((function(t){if(t=o().Y2.sanitizeText(t,s()),!i.records.branches.has(t)){const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}{i.records.currBranch=t;const r=i.records.branches.get(i.records.currBranch);i.records.head=void 0!==r&&r?i.records.commits.get(r)??null:null}}),"checkout");function u(t,r,e){const n=t.indexOf(r);-1===n?t.push(e):t.splice(n,1,e)}function b(t){const r=t.reduce(((t,r)=>t.seq>r.seq?t:r),t[0]);let e="";t.forEach((function(t){e+=t===r?"\t*":"\t|"}));const n=[e,r.id,r.seq];for(const o in i.records.branches)i.records.branches.get(o)===r.id&&n.push(o);if(o().Rm.debug(n.join(" ")),r.parents&&2==r.parents.length&&r.parents[0]&&r.parents[1]){const e=i.records.commits.get(r.parents[0]);u(t,r,e),r.parents[1]&&t.push(i.records.commits.get(r.parents[1]))}else{if(0==r.parents.length)return;if(r.parents[0]){const e=i.records.commits.get(r.parents[0]);u(t,r,e)}}b(t=d(t,(t=>t.id)))}(0,o().K2)(u,"upsert"),(0,o().K2)(b,"prettyPrintCommitHistory");var w=(0,o().K2)((function(){o().Rm.debug(i.records.commits);b([T()[0]])}),"prettyPrint"),B=(0,o().K2)((function(){i.reset(),(0,o().IU)()}),"clear"),E=(0,o().K2)((function(){return[...i.records.branchConfig.values()].map(((t,r)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${r}`)})).sort(((t,r)=>(t.order??0)-(r.order??0))).map((({name:t})=>({name:t})))}),"getBranchesAsObjArray"),k=(0,o().K2)((function(){return i.records.branches}),"getBranches"),C=(0,o().K2)((function(){return i.records.commits}),"getCommits"),T=(0,o().K2)((function(){const t=[...i.records.commits.values()];return t.forEach((function(t){o().Rm.debug(t.id)})),t.sort(((t,r)=>t.seq-r.seq)),t}),"getCommitsArray"),L={commitType:a,getConfig:s,setDirection:m,setOptions:$,getOptions:l,commit:g,branch:y,merge:p,cherryPick:x,checkout:f,prettyPrint:w,clear:B,getBranchesAsObjArray:E,getBranches:k,getCommits:C,getCommitsArray:T,getCurrentBranch:(0,o().K2)((function(){return i.records.currBranch}),"getCurrentBranch"),getDirection:(0,o().K2)((function(){return i.records.direction}),"getDirection"),getHead:(0,o().K2)((function(){return i.records.head}),"getHead"),setAccTitle:o().SV,getAccTitle:o().iN,getAccDescription:o().m7,setAccDescription:o().EI,setDiagramTitle:o().ke,getDiagramTitle:o().ab},K=(0,o().K2)(((t,r)=>{(0,e(893159).S)(t,r),t.dir&&r.setDirection(t.dir);for(const e of t.statements)M(e,r)}),"populate"),M=(0,o().K2)(((t,r)=>{const e={Commit:(0,o().K2)((t=>r.commit(R(t))),"Commit"),Branch:(0,o().K2)((t=>r.branch(v(t))),"Branch"),Merge:(0,o().K2)((t=>r.merge(P(t))),"Merge"),Checkout:(0,o().K2)((t=>r.checkout(I(t))),"Checkout"),CherryPicking:(0,o().K2)((t=>r.cherryPick(A(t))),"CherryPicking")}[t.$type];e?e(t):o().Rm.error(`Unknown statement type: ${t.$type}`)}),"parseStatement"),R=(0,o().K2)((t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?a[t.type]:a.NORMAL,tags:t.tags??void 0})),"parseCommit"),v=(0,o().K2)((t=>({name:t.name,order:t.order??0})),"parseBranch"),P=(0,o().K2)((t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?a[t.type]:void 0,tags:t.tags??void 0})),"parseMerge"),I=(0,o().K2)((t=>t.branch),"parseCheckout"),A=(0,o().K2)((t=>({id:t.id,targetId:"",tags:0===t.tags?.length?void 0:t.tags,parent:t.parent})),"parseCherryPicking"),G={parse:(0,o().K2)((async t=>{const r=await(0,e(1112).qg)("gitGraph",t);o().Rm.debug(r),K(r,L)}),"parse")};var O=(0,o().D7)(),q=O?.gitGraph,z=10,H=40,S=new Map,D=new Map,Y=new Map,N=[],j=0,W="LR",_=(0,o().K2)((()=>{S.clear(),D.clear(),Y.clear(),j=0,N=[],W="LR"}),"clear"),F=(0,o().K2)((t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=t.trim(),r.appendChild(e)})),r}),"drawText"),U=(0,o().K2)((t=>{let r,e,n;return"BT"===W?(e=(0,o().K2)(((t,r)=>t<=r),"comparisonFunc"),n=1/0):(e=(0,o().K2)(((t,r)=>t>=r),"comparisonFunc"),n=0),t.forEach((t=>{const o="TB"===W||"BT"==W?D.get(t)?.y:D.get(t)?.x;void 0!==o&&e(o,n)&&(r=t,n=o)})),r}),"findClosestParent"),V=(0,o().K2)((t=>{let r="",e=1/0;return t.forEach((t=>{const n=D.get(t).y;n<=e&&(r=t,e=n)})),r||void 0}),"findClosestParentBT"),J=(0,o().K2)(((t,r,e)=>{let n=e,o=e;const a=[];t.forEach((t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);e.parents.length?(n=X(e),o=Math.max(n,o)):a.push(e),Z(e,n)})),n=o,a.forEach((t=>{tt(t,n,e)})),t.forEach((t=>{const e=r.get(t);if(e?.parents.length){const t=V(e.parents);n=D.get(t).y-H,n<=o&&(o=n);const r=S.get(e.branch).pos,a=n-z;D.set(e.id,{x:r,y:a})}}))}),"setParallelBTPos"),Q=(0,o().K2)((t=>{const r=U(t.parents.filter((t=>null!==t)));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);const e=D.get(r)?.y;if(void 0===e)throw new Error(`Closest parent position not found for commit ${t.id}`);return e}),"findClosestParentPos"),X=(0,o().K2)((t=>Q(t)+H),"calculateCommitPosition"),Z=(0,o().K2)(((t,r)=>{const e=S.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const n=e.pos,o=r+z;return D.set(t.id,{x:n,y:o}),{x:n,y:o}}),"setCommitPosition"),tt=(0,o().K2)(((t,r,e)=>{const n=S.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const o=r+e,a=n.pos;D.set(t.id,{x:a,y:o})}),"setRootPosition"),rt=(0,o().K2)(((t,r,e,n,o,c)=>{if(c===a.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${o%8} ${n}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${o%8} ${n}-inner`);else if(c===a.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`);else{const s=t.append("circle");if(s.attr("cx",e.x),s.attr("cy",e.y),s.attr("r",r.type===a.MERGE?9:10),s.attr("class",`commit ${r.id} commit${o%8}`),c===a.MERGE){const a=t.append("circle");a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",6),a.attr("class",`commit ${n} ${r.id} commit${o%8}`)}if(c===a.REVERSE){t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${n} ${r.id} commit${o%8}`)}}}),"drawCommitBullet"),et=(0,o().K2)(((t,r,e,n)=>{if(r.type!==a.CHERRY_PICK&&(r.customId&&r.type===a.MERGE||r.type!==a.MERGE)&&q?.showCommitLabel){const o=t.append("g"),a=o.insert("rect").attr("class","commit-label-bkg"),c=o.append("text").attr("x",n).attr("y",e.y+25).attr("class","commit-label").text(r.id),s=c.node()?.getBBox();if(s&&(a.attr("x",e.posWithOffset-s.width/2-2).attr("y",e.y+13.5).attr("width",s.width+4).attr("height",s.height+4),"TB"===W||"BT"===W?(a.attr("x",e.x-(s.width+16+5)).attr("y",e.y-12),c.attr("x",e.x-(s.width+16)).attr("y",e.y+s.height-12)):c.attr("x",e.posWithOffset-s.width/2),q.rotateCommitLabel))if("TB"===W||"BT"===W)c.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),a.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const t=-7.5-(s.width+10)/25*9.5,r=10+s.width/25*8.5;o.attr("transform","translate("+t+", "+r+") rotate(-45, "+n+", "+e.y+")")}}}),"drawCommitLabel"),nt=(0,o().K2)(((t,r,e,n)=>{if(r.tags.length>0){let o=0,a=0,c=0;const s=[];for(const n of r.tags.reverse()){const r=t.insert("polygon"),i=t.append("circle"),h=t.append("text").attr("y",e.y-16-o).attr("class","tag-label").text(n),d=h.node()?.getBBox();if(!d)throw new Error("Tag bbox not found");a=Math.max(a,d.width),c=Math.max(c,d.height),h.attr("x",e.posWithOffset-d.width/2),s.push({tag:h,hole:i,rect:r,yOffset:o}),o+=20}for(const{tag:t,hole:r,rect:i,yOffset:h}of s){const o=c/2,s=e.y-19.2-h;if(i.attr("class","tag-label-bkg").attr("points",`\n      ${n-a/2-2},${s+2}  \n      ${n-a/2-2},${s-2}\n      ${e.posWithOffset-a/2-4},${s-o-2}\n      ${e.posWithOffset+a/2+4},${s-o-2}\n      ${e.posWithOffset+a/2+4},${s+o+2}\n      ${e.posWithOffset-a/2-4},${s+o+2}`),r.attr("cy",s).attr("cx",n-a/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===W||"BT"===W){const c=n+h;i.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${c+2}\n        ${e.x},${c-2}\n        ${e.x+z},${c-o-2}\n        ${e.x+z+a+4},${c-o-2}\n        ${e.x+z+a+4},${c+o+2}\n        ${e.x+z},${c+o+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),r.attr("cx",e.x+2).attr("cy",c).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),t.attr("x",e.x+5).attr("y",c+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+n+")")}}}}),"drawCommitTags"),ot=(0,o().K2)((t=>{switch(t.customType??t.type){case a.NORMAL:return"commit-normal";case a.REVERSE:return"commit-reverse";case a.HIGHLIGHT:return"commit-highlight";case a.MERGE:return"commit-merge";case a.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),at=(0,o().K2)(((t,r,e,n)=>{const o={x:0,y:0};if(!(t.parents.length>0)){if("TB"===r)return 30;if("BT"===r){return(n.get(t.id)??o).y-H}return 0}{const e=U(t.parents);if(e){const a=n.get(e)??o;if("TB"===r)return a.y+H;if("BT"===r){return(n.get(t.id)??o).y-H}return a.x+H}}return 0}),"calculatePosition"),ct=(0,o().K2)(((t,r,e)=>{const n="BT"===W&&e?r:r+z,o="TB"===W||"BT"===W?n:S.get(t.branch)?.pos,a="TB"===W||"BT"===W?S.get(t.branch)?.pos:n;if(void 0===a||void 0===o)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:o,posWithOffset:n}}),"getCommitPosition"),st=(0,o().K2)(((t,r,e)=>{if(!q)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let c="TB"===W||"BT"===W?30:0;const s=[...r.keys()],i=q?.parallelCommits??!1,h=(0,o().K2)(((t,e)=>{const n=r.get(t)?.seq,o=r.get(e)?.seq;return void 0!==n&&void 0!==o?n-o:0}),"sortKeys");let d=s.sort(h);"BT"===W&&(i&&J(d,r,c),d=d.reverse()),d.forEach((t=>{const o=r.get(t);if(!o)throw new Error(`Commit not found for key ${t}`);i&&(c=at(o,W,c,D));const s=ct(o,c,i);if(e){const t=ot(o),r=o.customType??o.type,e=S.get(o.branch)?.index??0;rt(n,o,s,t,e,r),et(a,o,s,c),nt(a,o,s,c)}"TB"===W||"BT"===W?D.set(o.id,{x:s.x,y:s.posWithOffset}):D.set(o.id,{x:s.posWithOffset,y:s.y}),c="BT"===W&&i?c+H:c+H+z,c>j&&(j=c)}))}),"drawCommits"),it=(0,o().K2)(((t,r,e,n,a)=>{const c=("TB"===W||"BT"===W?e.x<n.x:e.y<n.y)?r.branch:t.branch,s=(0,o().K2)((t=>t.branch===c),"isOnBranchToGetCurve"),i=(0,o().K2)((e=>e.seq>t.seq&&e.seq<r.seq),"isBetweenCommits");return[...a.values()].some((t=>i(t)&&s(t)))}),"shouldRerouteArrow"),ht=(0,o().K2)(((t,r,e=0)=>{const n=t+Math.abs(t-r)/2;if(e>5)return n;if(N.every((t=>Math.abs(t-n)>=10)))return N.push(n),n;const o=Math.abs(t-r);return ht(t,r-o/5,e+1)}),"findLane"),dt=(0,o().K2)(((t,r,e,n)=>{const o=D.get(r.id),c=D.get(e.id);if(void 0===o||void 0===c)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const s=it(r,e,o,c,n);let i,h="",d="",m=0,$=0,l=S.get(e.branch)?.index;if(e.type===a.MERGE&&r.id!==e.parents[0]&&(l=S.get(r.branch)?.index),s){h="A 10 10, 0, 0, 0,",d="A 10 10, 0, 0, 1,",m=10,$=10;const t=o.y<c.y?ht(o.y,c.y):ht(c.y,o.y),e=o.x<c.x?ht(o.x,c.x):ht(c.x,o.x);"TB"===W?o.x<c.x?i=`M ${o.x} ${o.y} L ${e-m} ${o.y} ${d} ${e} ${o.y+$} L ${e} ${c.y-m} ${h} ${e+$} ${c.y} L ${c.x} ${c.y}`:(l=S.get(r.branch)?.index,i=`M ${o.x} ${o.y} L ${e+m} ${o.y} ${h} ${e} ${o.y+$} L ${e} ${c.y-m} ${d} ${e-$} ${c.y} L ${c.x} ${c.y}`):"BT"===W?o.x<c.x?i=`M ${o.x} ${o.y} L ${e-m} ${o.y} ${h} ${e} ${o.y-$} L ${e} ${c.y+m} ${d} ${e+$} ${c.y} L ${c.x} ${c.y}`:(l=S.get(r.branch)?.index,i=`M ${o.x} ${o.y} L ${e+m} ${o.y} ${d} ${e} ${o.y-$} L ${e} ${c.y+m} ${h} ${e-$} ${c.y} L ${c.x} ${c.y}`):o.y<c.y?i=`M ${o.x} ${o.y} L ${o.x} ${t-m} ${h} ${o.x+$} ${t} L ${c.x-m} ${t} ${d} ${c.x} ${t+$} L ${c.x} ${c.y}`:(l=S.get(r.branch)?.index,i=`M ${o.x} ${o.y} L ${o.x} ${t+m} ${d} ${o.x+$} ${t} L ${c.x-m} ${t} ${h} ${c.x} ${t-$} L ${c.x} ${c.y}`)}else h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",m=20,$=20,"TB"===W?(o.x<c.x&&(i=e.type===a.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y-m} ${h} ${o.x+$} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${d} ${c.x} ${o.y+$} L ${c.x} ${c.y}`),o.x>c.x&&(h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",m=20,$=20,i=e.type===a.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y-m} ${d} ${o.x-$} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x+m} ${o.y} ${h} ${c.x} ${o.y+$} L ${c.x} ${c.y}`),o.x===c.x&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`)):"BT"===W?(o.x<c.x&&(i=e.type===a.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y+m} ${d} ${o.x+$} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${h} ${c.x} ${o.y-$} L ${c.x} ${c.y}`),o.x>c.x&&(h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",m=20,$=20,i=e.type===a.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y+m} ${h} ${o.x-$} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${h} ${c.x} ${o.y-$} L ${c.x} ${c.y}`),o.x===c.x&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`)):(o.y<c.y&&(i=e.type===a.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${d} ${c.x} ${o.y+$} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${o.x} ${c.y-m} ${h} ${o.x+$} ${c.y} L ${c.x} ${c.y}`),o.y>c.y&&(i=e.type===a.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${h} ${c.x} ${o.y-$} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${o.x} ${c.y+m} ${d} ${o.x+$} ${c.y} L ${c.x} ${c.y}`),o.y===c.y&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`));if(void 0===i)throw new Error("Line definition not found");t.append("path").attr("d",i).attr("class","arrow arrow"+l%8)}),"drawArrow"),mt=(0,o().K2)(((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach((t=>{const n=r.get(t);n.parents&&n.parents.length>0&&n.parents.forEach((t=>{dt(e,r.get(t),n,r)}))}))}),"drawArrows"),$t=(0,o().K2)(((t,r)=>{const e=t.append("g");r.forEach(((t,r)=>{const n=r%8,o=S.get(t.name)?.pos;if(void 0===o)throw new Error(`Position not found for branch ${t.name}`);const a=e.append("line");a.attr("x1",0),a.attr("y1",o),a.attr("x2",j),a.attr("y2",o),a.attr("class","branch branch"+n),"TB"===W?(a.attr("y1",30),a.attr("x1",o),a.attr("y2",j),a.attr("x2",o)):"BT"===W&&(a.attr("y1",j),a.attr("x1",o),a.attr("y2",30),a.attr("x2",o)),N.push(o);const c=t.name,s=F(c),i=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);h.node().appendChild(s);const d=s.getBBox();i.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(!0===q?.rotateCommitLabel?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),h.attr("transform","translate("+(-d.width-14-(!0===q?.rotateCommitLabel?30:0))+", "+(o-d.height/2-1)+")"),"TB"===W?(i.attr("x",o-d.width/2-10).attr("y",0),h.attr("transform","translate("+(o-d.width/2-5)+", 0)")):"BT"===W?(i.attr("x",o-d.width/2-10).attr("y",j),h.attr("transform","translate("+(o-d.width/2-5)+", "+j+")")):i.attr("transform","translate(-19, "+(o-d.height/2)+")")}))}),"drawBranches"),lt=(0,o().K2)((function(t,r,e,n,o){return S.set(t,{pos:r,index:e}),r+=50+(o?40:0)+("TB"===W||"BT"===W?n.width/2:0)}),"setBranchPosition");var gt={parser:G,db:L,renderer:{draw:(0,o().K2)((function(t,r,a,c){if(_(),o().Rm.debug("in gitgraph renderer",t+"\n","id:",r,a),!q)throw new Error("GitGraph config not found");const s=q.rotateCommitLabel??!1,i=c.db;Y=i.getCommits();const h=i.getBranchesAsObjArray();W=i.getDirection();const d=(0,e(61627).Ltv)(`[id="${r}"]`);let m=0;h.forEach(((t,r)=>{const e=F(t.name),n=d.append("g"),o=n.insert("g").attr("class","branchLabel"),a=o.insert("g").attr("class","label branch-label");a.node()?.appendChild(e);const c=e.getBBox();m=lt(t.name,m,r,c,s),a.remove(),o.remove(),n.remove()})),st(d,Y,!1),q.showBranches&&$t(d,h),mt(d,Y),st(d,Y,!0),n()._K.insertTitle(d,"gitTitleText",q.titleTopMargin??0,i.getDiagramTitle()),(0,o().mj)(void 0,d,q.diagramPadding,q.useMaxWidth)}),"draw")},styles:(0,o().K2)((t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((r=>`\n        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }\n        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }\n        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }\n        .label${r}  { fill: ${t["git"+r]}; }\n        .arrow${r} { stroke: ${t["git"+r]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`),"getStyles")}},893159:(t,r,e)=>{e.d(r,{S:()=>n});function n(t,r){t.accDescr&&r.setAccDescription?.(t.accDescr),t.accTitle&&r.setAccTitle?.(t.accTitle),t.title&&r.setDiagramTitle?.(t.title)}(0,e(64595).K2)(n,"populateCommonDb")},968448:(t,r,e)=>{e.d(r,{m:()=>n});var n=class{constructor(t){this.init=t,this.records=this.init()}static{(0,e(64595).K2)(this,"ImperativeState")}reset(){this.records=this.init()}}}}]);