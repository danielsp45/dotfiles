"use strict";(globalThis.webpackChunknotion_next=globalThis.webpackChunknotion_next||[]).push([[70216],{412681:(e,t,n)=>{function r(e){const t=new Uint8Array(e);let n="";for(const r of t)n+=String.fromCharCode(r);return btoa(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function o(e){const t=e.replace(/-/g,"+").replace(/_/g,"/"),n=(4-t.length%4)%4,r=t.padEnd(t.length+n,"="),o=atob(r),a=new ArrayBuffer(o.length),i=new Uint8Array(a);for(let s=0;s<o.length;s++)i[s]=o.charCodeAt(s);return a}function a(){return void 0!==window?.PublicKeyCredential&&"function"==typeof window.PublicKeyCredential}function i(e){const{id:t}=e;return{...e,id:o(t),transports:e.transports}}function s(e){return"localhost"===e||/^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/i.test(e)}n.d(t,{HS:()=>R,startRegistration:()=>h});class c extends Error{constructor({message:e,code:t,cause:n,name:r}){super(e,{cause:n}),this.name=r??n.name,this.code=t}}const l=new class{createNewAbortSignal(){if(this.controller){const e=new Error("Cancelling existing WebAuthn API call for new one");e.name="AbortError",this.controller.abort(e)}const e=new AbortController;return this.controller=e,e.signal}cancelCeremony(){if(this.controller){const e=new Error("Manually cancelling existing WebAuthn API call");e.name="AbortError",this.controller.abort(e),this.controller=void 0}}},u=["cross-platform","platform"];function d(e){if(e&&!(u.indexOf(e)<0))return e}async function h(e){if(!a())throw new Error("WebAuthn is not supported in this browser");var t;const n={publicKey:{...e,challenge:o(e.challenge),user:{...e.user,id:(t=e.user.id,(new TextEncoder).encode(t))},excludeCredentials:e.excludeCredentials?.map(i)}};let u;n.signal=l.createNewAbortSignal();try{u=await navigator.credentials.create(n)}catch(b){throw function({error:e,options:t}){const{publicKey:n}=t;if(!n)throw Error("options was missing required publicKey property");if("AbortError"===e.name){if(t.signal instanceof AbortSignal)return new c({message:"Registration ceremony was sent an abort signal",code:"ERROR_CEREMONY_ABORTED",cause:e})}else if("ConstraintError"===e.name){if(!0===n.authenticatorSelection?.requireResidentKey)return new c({message:"Discoverable credentials were required but no available authenticator supported it",code:"ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT",cause:e});if("required"===n.authenticatorSelection?.userVerification)return new c({message:"User verification was required but no available authenticator supported it",code:"ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT",cause:e})}else{if("InvalidStateError"===e.name)return new c({message:"The authenticator was previously registered",code:"ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED",cause:e});if("NotAllowedError"===e.name)return new c({message:e.message,code:"ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",cause:e});if("NotSupportedError"===e.name)return 0===n.pubKeyCredParams.filter((e=>"public-key"===e.type)).length?new c({message:'No entry in pubKeyCredParams was of type "public-key"',code:"ERROR_MALFORMED_PUBKEYCREDPARAMS",cause:e}):new c({message:"No available authenticator supported any of the specified pubKeyCredParams algorithms",code:"ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG",cause:e});if("SecurityError"===e.name){const t=window.location.hostname;if(!s(t))return new c({message:`${window.location.hostname} is an invalid domain`,code:"ERROR_INVALID_DOMAIN",cause:e});if(n.rp.id!==t)return new c({message:`The RP ID "${n.rp.id}" is invalid for this domain`,code:"ERROR_INVALID_RP_ID",cause:e})}else if("TypeError"===e.name){if(n.user.id.byteLength<1||n.user.id.byteLength>64)return new c({message:"User ID was not between 1 and 64 characters",code:"ERROR_INVALID_USER_ID_LENGTH",cause:e})}else if("UnknownError"===e.name)return new c({message:"The authenticator was unable to process the specified options, or could not create a new credential",code:"ERROR_AUTHENTICATOR_GENERAL_ERROR",cause:e})}return e}({error:b,options:n})}if(!u)throw new Error("Registration was not completed");const{id:h,rawId:R,response:p,type:E}=u;let g,f,A,m;if("function"==typeof p.getTransports&&(g=p.getTransports()),"function"==typeof p.getPublicKeyAlgorithm)try{f=p.getPublicKeyAlgorithm()}catch(y){w("getPublicKeyAlgorithm()",y)}if("function"==typeof p.getPublicKey)try{const e=p.getPublicKey();null!==e&&(A=r(e))}catch(y){w("getPublicKey()",y)}if("function"==typeof p.getAuthenticatorData)try{m=r(p.getAuthenticatorData())}catch(y){w("getAuthenticatorData()",y)}return{id:h,rawId:r(R),response:{attestationObject:r(p.attestationObject),clientDataJSON:r(p.clientDataJSON),transports:g,publicKeyAlgorithm:f,publicKey:A,authenticatorData:m},type:E,clientExtensionResults:u.getClientExtensionResults(),authenticatorAttachment:d(u.authenticatorAttachment)}}function w(e,t){console.warn(`The browser extension that intercepted this WebAuthn API call incorrectly implemented ${e}. You should report this error to them.\n`,t)}async function R(e,t=!1){if(!a())throw new Error("WebAuthn is not supported in this browser");let n;0!==e.allowCredentials?.length&&(n=e.allowCredentials?.map(i));const u={...e,challenge:o(e.challenge),allowCredentials:n},h={};if(t){if(!(await function(){const e=window.PublicKeyCredential;return void 0===e.isConditionalMediationAvailable?new Promise((e=>e(!1))):e.isConditionalMediationAvailable()}()))throw Error("Browser does not support WebAuthn autofill");if(document.querySelectorAll("input[autocomplete$='webauthn']").length<1)throw Error('No <input> with "webauthn" as the only or last value in its `autocomplete` attribute was detected');h.mediation="conditional",u.allowCredentials=[]}let w;h.publicKey=u,h.signal=l.createNewAbortSignal();try{w=await navigator.credentials.get(h)}catch(m){throw function({error:e,options:t}){const{publicKey:n}=t;if(!n)throw Error("options was missing required publicKey property");if("AbortError"===e.name){if(t.signal instanceof AbortSignal)return new c({message:"Authentication ceremony was sent an abort signal",code:"ERROR_CEREMONY_ABORTED",cause:e})}else{if("NotAllowedError"===e.name)return new c({message:e.message,code:"ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",cause:e});if("SecurityError"===e.name){const t=window.location.hostname;if(!s(t))return new c({message:`${window.location.hostname} is an invalid domain`,code:"ERROR_INVALID_DOMAIN",cause:e});if(n.rpId!==t)return new c({message:`The RP ID "${n.rpId}" is invalid for this domain`,code:"ERROR_INVALID_RP_ID",cause:e})}else if("UnknownError"===e.name)return new c({message:"The authenticator was unable to process the specified options, or could not create a new assertion signature",code:"ERROR_AUTHENTICATOR_GENERAL_ERROR",cause:e})}return e}({error:m,options:h})}if(!w)throw new Error("Authentication was not completed");const{id:R,rawId:p,response:E,type:g}=w;let f;var A;return E.userHandle&&(A=E.userHandle,f=new TextDecoder("utf-8").decode(A)),{id:R,rawId:r(p),response:{authenticatorData:r(E.authenticatorData),clientDataJSON:r(E.clientDataJSON),signature:r(E.signature),userHandle:f},type:g,clientExtensionResults:w.getClientExtensionResults(),authenticatorAttachment:d(w.authenticatorAttachment)}}}}]);